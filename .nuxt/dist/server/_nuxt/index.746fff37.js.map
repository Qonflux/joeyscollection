{"version":3,"file":"index.746fff37.js","sources":["../../../../components/base/LoadingSpinner.vue","../../../../components/admin/GameDetail.vue","../../../../pages/admin/add/index.vue"],"sourcesContent":["<template>\n  <div class=\"spinner\" :style=\"spinnerStyle\" />\n</template>\n\n<script>\nexport default {\n  props: {\n    size: {\n      type: [Number, String],\n      default: 1.5\n    },\n    lineSize: {\n      type: [Number, String],\n      default: 0.25\n    },\n    lineBgColor: {\n      type: String,\n      default: '#eee'\n    },\n    lineFgColor: {\n      type: String,\n      default: '#7C3AED'\n    },\n    speed: {\n      type: [Number, String],\n      default: 0.8\n    }\n  },\n  computed: {\n    spinnerStyle() {\n      return {\n        'margin': '0 auto',\n        'border-radius': '100%',\n        'border': this.lineSize + 'rem solid ' + this.lineBgColor,\n        'border-top': this.lineSize + 'rem solid ' + this.lineFgColor,\n        'width': this.size + 'rem',\n        'height': this.size + 'rem',\n        'animation': 'spinner-spin ' + this.speed + 's linear infinite'\n      }\n    }\n  }\n}\n</script>\n\n<style>\n.spinner {\n  transition: all 0.3s linear;\n}\n\n@keyframes spinner-spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n</style>","<template>\n  <h2>{{ props.game.name }}</h2>\n  <img :src=\"props.game.cover\">\n  <p class=\"mt-3\">Release: {{ props.game.releaseDate }}</p>\n  <p class=\"mt-3\">Genre<span v-if=\"props.game.genres.length < 1\">s</span>: {{ props.game.genres.join(', ') }}</p>\n  <p class=\"mt-3\">Beschikbaar op: {{ props.systems.join(', ') }}</p>\n  <p class=\"mt-3 mb-1\">Platform:</p>\n  <select\n    id=\"plaform\"\n    :value=\"props.game.platform\"\n    name=\"plaform\"\n    class=\"block p-4 pr-8 w-full text-sm rounded-lg border bg-gray-700 border-gray-600 placeholder-gray-400 text-white focus:ring-violet-600 focus:border-violet-600\"\n    @input=\"onChange($event)\"\n  >\n    <option \n      v-for=\"platform in platforms\" \n      :key=\"platform\" \n      :value=\"platform\"\n    >\n      {{ platform }}\n    </option>\n  </select>\n\n  <input id=\"completed\" :value=\"props.game.completed\" type=\"checkbox\" class=\"mt-3\" @input=\"emit('update-completed', $event)\">\n  <label for=\"completed\" class=\"text-sm\"> Uitgespeeld</label><br>\n\n  <button \n    class=\"bg-violet-600 hover:bg-violet-800 rounded-md font-bold py-2 px-4 my-3 transition duration-200\" \n    @click=\"addGame\"\n  >\n    Toevoegen\n  </button>\n</template>\n\n<script setup>\nconst config = useRuntimeConfig() \nconst { $showToast } = useNuxtApp()\n\nconst props = defineProps({\n  game: {\n    type: Object,\n    required: true\n  },\n  systems: {\n    type: Array,\n    required: true\n  }\n})\n\nconst emit = defineEmits(['update-platform', 'update-completed'])\n\nconst platforms = ref([\n  'Nintendo Entertainment System (NES)',\n  'Super Nintendo Entertainment System (SNES)',\n  'Nintendo 64',\n  'Nintendo GameCube',\n  'Wii',\n  'Wii U',\n  'Nintendo Switch',\n  'Game Boy',\n  'Game Boy Color',\n  'Game Boy Advance',\n  'Nintendo DS',\n  'Nintendo 3DS',\n  'PlayStation',\n  'PlayStation 2',\n  'PlayStation 3',\n  'PlayStation 4',\n  'Xbox',\n  'Xbox 360',\n  'Xbox One',\n  'Sega Mega Drive',\n])\n\nconst onChange = (e) => {\n  const name = e.target.options[e.target.options.selectedIndex].text\n  emit('update-platform', name)\n}\n\nconst addGame = async () => {\n  try {\n    await $fetch(`${config.public.API_URL}/api/games`, { method: 'POST', body: { ...props.game }})\n    $showToast('Game succesvol toegevoegd', 'info');\n  } catch (err) {\n    console.error(err)\n  }\n}\n</script>","<template>\n  <div>\n    <!-- Search bar -->\n    <div class=\"relative mb-4\">\n      <div class=\"flex absolute inset-y-0 left-0 items-center pl-3 pointer-events-none\">\n        <svg\n          aria-hidden=\"true\"\n          class=\"w-5 h-5 text-gray-500\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          viewBox=\"0 0 24 24\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        ><path\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          stroke-width=\"2\"\n          d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n        /></svg>\n      </div>\n      <input\n        v-model=\"searchTerm\"\n        type=\"search\"\n        class=\"block p-4 pl-10 w-full text-sm rounded-lg border bg-gray-700 border-gray-600 placeholder-gray-400 text-white focus:ring-violet-600 focus:border-violet-600\"\n        placeholder=\"Zoek spel\"\n        @input=\"searchGame\"\n      >\n    </div>\n\n    <!-- Search results loading spinner -->\n    <BaseLoadingSpinner v-if=\"isLoadingSearch\" size=\"3\" line-size=\"0.375\" />\n\n    <!-- Search results -->\n    <div v-else-if=\"foundGames && foundGames.length > 0 && !game.igdbId\" class=\"text-sm\">\n      <h2>Gevonden games:</h2>\n      <a\n        v-for=\"foundGame in foundGames\"\n        :key=\"foundGame.id\"\n        @click=\"getGame(foundGame)\"\n      >\n        {{ foundGame.name }} ({{ extractYear(convertDate(foundGame.first_release_date)) }})<br>\n      </a>\n    </div>\n\n    <!-- Game details and form -->\n    <AdminGameDetail \n      v-else-if=\"game.igdbId\" \n      :game=\"game\"\n      :systems=\"platforms\"\n      class=\"mt-4 text-sm\"\n      @update-platform=\"game.platform = $event\"\n      @update-completed=\"game.completed = !game.completed\"\n    />\n  </div>\n</template>\n\n<script setup>\nconst config = useRuntimeConfig()\nconst searchTerm = ref('')\nconst foundGames = ref([])\nconst debounce = ref(null)\nconst token = ref(null)\nconst isLoadingSearch = ref(false)\n\nconst defaultGame = {\n  completed: false,\n  cover: null,\n  genres: [],\n  igdbId: null,\n  name: null,\n  platform: 'Nintendo Switch',\n  releaseDate: null\n}\n\nconst platforms = ref([])\n\nconst game = reactive({ ...defaultGame })\n\nconst getGame = async (selectedGame) => {\n  game.igdbId = selectedGame.id\n  game.name = selectedGame.name\n  game.releaseDate = convertDate(selectedGame.first_release_date)\n  const cover = await fetchApi('covers', `fields url; where id = ${selectedGame.cover};`)\n  game.cover = cover[0]?.url.replace('thumb', 'cover_big')\n  selectedGame.genres.forEach(genre => {\n    setTimeout(async () => {\n      const gen = await fetchApi('genres', `fields name; where id = ${genre};`)\n      game.genres.push(gen[0]?.name)\n    }, 250);\n  })\n  platforms.value = []\n  selectedGame.platforms.forEach(platform => {\n    setTimeout(async () => {\n      const plat = await fetchApi('platforms', `fields name; where id = ${platform};`)\n      platforms.value.push(plat[0]?.name)\n    }, 250);\n  })\n}\n\nconst convertDate = (date) => {\n  date = new Date(Number(date * 1000))\n  return date.toLocaleDateString('nl-NL', { day: '2-digit', month: '2-digit', year: 'numeric' })\n} \n\nconst extractYear = (date) => {\n  return date.split('-')[2]\n}\n\nconst searchGame = async () => {\n  if (searchTerm.value.length < 3) return\n  isLoadingSearch.value = true\n  clearTimeout(debounce.value)\n  debounce.value = setTimeout(async () => {\n    resetGame()\n    foundGames.value = await fetchApi('games', `fields name,cover,first_release_date,genres,platforms; search \"${searchTerm.value}\"; limit 50;`)\n    isLoadingSearch.value = false\n  }, 250)\n}\n\nconst resetGame = () => {\n  Object.assign(game, defaultGame);\n  game.genres = []\n}\n\nconst fetchApi = async (endpoint, body) => {\n  try {\n    if (!token.value) {\n      ({ access_token: token.value } = await $fetch(`https://id.twitch.tv/oauth2/token?client_secret=${config.public.IGDB_CLIENT_SECRET}&client_id=${config.public.IGDB_CLIENT_ID}&grant_type=client_credentials`, { method: 'POST' }))\n    }\n\n    return await $fetch(`${config.public.PROXY}/https://api.igdb.com/v4/${endpoint}`, {\n      'method': 'POST',\n      'headers': {\n        'Client-ID': config.public.IGDB_CLIENT_ID,\n        'Authorization': `Bearer ${token.value}`\n      },\n      'body': body\n    })\n  } catch (err) {\n    console.error(err)\n  }\n}\n</script>"],"names":["_sfc_main"],"mappings":";;;;;;;;;;;;;;;;AAKA,MAAKA,cAAU;AAAA,EACb,OAAO;AAAA,IACL,MAAM;AAAA,MACJ,MAAM,CAAC,QAAQ,MAAM;AAAA,MACrB,SAAS;AAAA,IACV;AAAA,IACD,UAAU;AAAA,MACR,MAAM,CAAC,QAAQ,MAAM;AAAA,MACrB,SAAS;AAAA,IACV;AAAA,IACD,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACD,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS;AAAA,IACV;AAAA,IACD,OAAO;AAAA,MACL,MAAM,CAAC,QAAQ,MAAM;AAAA,MACrB,SAAS;AAAA,IACX;AAAA,EACD;AAAA,EACD,UAAU;AAAA,IACR,eAAe;AACb,aAAO;AAAA,QACL,UAAU;AAAA,QACV,iBAAiB;AAAA,QACjB,UAAU,KAAK,WAAW,eAAe,KAAK;AAAA,QAC9C,cAAc,KAAK,WAAW,eAAe,KAAK;AAAA,QAClD,SAAS,KAAK,OAAO;AAAA,QACrB,UAAU,KAAK,OAAO;AAAA,QACtB,aAAa,kBAAkB,KAAK,QAAQ;AAAA,MAC9C;AAAA,IACF;AAAA,EACF;AACF;;;IAxCO,OAAM;AAAA,IAAW,OAAO,SAAY;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;ACkC3C,qBAAA;AACA,eAAA;AAeA,UAAA,YAAA,IAAA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA,qBAAA;AACA,UAAA,aAAA,IAAA,EAAA;AACA,UAAA,aAAA,IAAA,EAAA;AACA,QAAA,IAAA;AACA,QAAA,IAAA;AACA,UAAA,kBAAA,IAAA,KAAA;AAEA,UAAA,cAAA;AAAA,MACA,WAAA;AAAA,MACA,OAAA;AAAA,MACA,QAAA,CAAA;AAAA,MACA,QAAA;AAAA,MACA,MAAA;AAAA,MACA,UAAA;AAAA,MACA,aAAA;AAAA,IACA;AAEA,UAAA,YAAA,IAAA,EAAA;AAEA,UAAA,OAAA,SAAA,EAAA,GAAA,aAAA;AAuBA,UAAA,cAAA,CAAA,SAAA;AACA,aAAA,IAAA,KAAA,OAAA,OAAA,GAAA,CAAA;AACA,aAAA,KAAA,mBAAA,SAAA,EAAA,KAAA,WAAA,OAAA,WAAA,MAAA,WAAA;AAAA,IACA;AAEA,UAAA,cAAA,CAAA,SAAA;AACA,aAAA,KAAA,MAAA,GAAA,EAAA;AAAA,IACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}